/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of UserFriendDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export interface UserFriend {
uid: User["_id"] | User;
nickname?: string;
_id: mongoose.Types.ObjectId;
}

/**
 * Lean version of UserCitySubdocWithoutDefaultDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export interface UserCitySubdocWithoutDefault {
a?: string;
_id: mongoose.Types.ObjectId;
}

/**
 * Lean version of UserDocument (type alias of `User`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User

/**
 * Mongoose Query types
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel, UserQueries>("User", UserSchema);
 * ```
 */
export type UserQueries = {
populateFriends: <Q extends mongoose.Query<any, UserDocument, any>>(this: Q) => Q;
}

// generate versions of populate overload with each possible string

declare module "mongoose" {
  interface Query<ResultType, DocType extends UserDocument, THelpers = {}>  {
      // populate<T extends keyof DocType>(path: T, select?: string | any, model?: string | Model<any>, match?: any): Query<DocType & { [ref in T]: Omit<DocType[T], keyof Types.ObjectId> }, DocType, THelpers>
      populate<T extends keyof DocType>(path: T, select?: string | any, model?: string | Model<any>, match?: any): Query<DocType & { [ref in T]: Exclude<DocType[T], Types.ObjectId> }, DocType, THelpers>

      // populate(path: "bestFriend"): Query<UserDocument & { bestFriend: UserDocument }, UserDocument & { bestFriend: UserDocument }, THelpers>

      /** Specifies paths which should be populated with other documents. */
      // populate(path: string | any, select?: string | any, model?: string | Model<any, THelpers>, match?: any): this;
      // populate(options: PopulateOptions | Array<PopulateOptions>): this;
    }
}


export type UserMethods = {
isMetadataString: (this: UserDocument) => boolean;
}

export type UserStatics = {
getFriends: (this: UserModel, friendUids: UserDocument["_id"][]) => Promise<UserObject[]>;
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel, UserQueries>("User", UserSchema);
 * ```
 */
export interface UserModel extends mongoose.Model<UserDocument, UserQueries>, UserStatics {}

/**
 * Mongoose Schema type
 * 
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<UserDocument, UserModel>

/**
 * Lean version of UserDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export interface User {
email: string;
firstName: string;
lastName: string;
metadata?: any;
bestFriend?: User["_id"] | User;
friends: UserFriend[];
city: {
coordinates: number[];
subdocWithoutDefault?: UserCitySubdocWithoutDefault[];
};
tags: string[];
alternateObjectId?: mongoose.Types.ObjectId;
socialMediaHandles?: Map<string, string>;
arrayOfMaps: (Map<string, number>)[];
buffer: Buffer;
bufferString?: Buffer;
bufferSchemaType?: Buffer;
decimal128?: number;
otherDecimal128?: number;
numberString?: number;
stringString?: string;
otherNumberString: number;
otherStringString: string;
_id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 * 
 * Type of `UserDocument["friends"]` element.
 */
export interface UserFriendDocument extends mongoose.Types.EmbeddedDocument {
uid: UserDocument["_id"] | UserDocument;
nickname?: string;
_id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 * 
 * Type of `UserDocument["city.subdocWithoutDefault"]` element.
 */
export interface UserCitySubdocWithoutDefaultDocument extends mongoose.Types.EmbeddedDocument {
a?: string;
_id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel, UserQueries>("User", UserSchema);
 * ```
 */
export interface UserDocument extends mongoose.Document<mongoose.Types.ObjectId, UserQueries>, UserMethods {
email: string;
firstName: string;
lastName: string;
metadata?: any;
bestFriend?: UserDocument["_id"] | UserDocument;
friends: mongoose.Types.DocumentArray<UserFriendDocument>;
city: {
coordinates: mongoose.Types.Array<number>;
subdocWithoutDefault?: mongoose.Types.DocumentArray<UserCitySubdocWithoutDefaultDocument>;
};
tags: mongoose.Types.Array<string>;
alternateObjectId?: mongoose.Types.ObjectId;
socialMediaHandles?: mongoose.Types.Map<string>;
arrayOfMaps: mongoose.Types.Array<mongoose.Types.Map<number>>;
buffer: mongoose.Types.Buffer;
bufferString?: mongoose.Types.Buffer;
bufferSchemaType?: mongoose.Types.Buffer;
decimal128?: mongoose.Types.Decimal128;
otherDecimal128?: mongoose.Types.Decimal128;
numberString?: number;
stringString?: string;
otherNumberString: number;
otherStringString: string;
_id: mongoose.Types.ObjectId;
name: string;
}

